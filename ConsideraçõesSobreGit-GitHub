O Github é um repositório remoto, criado como um serviço online de 
hospedagem de repositórios do Git.
• Funciona como um servidor que agrega todas as modificações 
realizadas por cada uma das pessoas envolvidas em um projeto, 
unificando as diferentes versões de código e seus históricos, permitindo 
compartilhamento entre as equipes.
• Além disso, o GitHub também conta com várias integrações com outros 
serviços online, permitindo o deploy automático de aplicação. Assim, 
garante a integração contínua e facilita o desenvolvimento


Nos últimos anos, o GitHub se tornou a principal rede social para o 
desenvolvimento de software, sendo que existem vários projetos 
open source hospedados na plataforma, que aceitam a 
colaboração de qualquer profissional.
• Outro ponto interessante é a sua utilização como currículo. Muitas 
empresas pedem na entrevista o link do GitHub para verificar seus 
projetos e entender suas capacidades de programação.


O GitHub é considerado é uma ferramenta essencial para 
engenheiros de software, com uma popularidade sem igual. 
Atualmente, ele acomoda mais de 25 milhões de usuários. Isso 
significa que há um número considerável de profissionais que estão 
procurando o GitHub para melhorar o fluxo de trabalho e a 
colaboração

Repositório
Repositório, ou repo, é um diretório onde os arquivos do seu projeto ficam 
armazenados. Ele pode ficar em um depósito do GitHub ou em seu 
computador. Você pode armazenar códigos, imagens, áudios, ou qualquer 
outra coisa relacionada ao projeto no diretório.

Branch 
Branch é uma cópia do diretório. Você pode usar o branch para 
desenvolver isoladamente.

• Trabalhar em um branch não irá afetar o repositório central ou 
outros branches. Depois de finalizar o trabalho você pode combinar 
seu branch isolado com outros branches através de um merge. Para 
combinar o branch isolado ao repositório central utiliza-se o Pull Request

Iniciando um Repositório
$ git init

Apagando um repositório
$ rm -rf .git

Listando Arquivos Modificados
$ git status

Desfazendo Alterações
Arquivos não monitorado
Se o arquivo foi modificado mas você ainda não executou
 git add, um simples git checkout removerá as alterações,
 deixando o arquivo como ele estava no último commit. 
Passe o nome do arquivo a ter as alterações
 desfeitas ou . para desfazer as alterações 
em todos os arquivos modificados. Muito útil 
se você está apenas experimentando um código mas 
não quer que ele seja salvo.
git checkout .
git clean -df

Removendo arquivos do Stage
Se você executou git add e quer desfazer, use o reset.

Desfazendo o último commit
Caso você tenha feito alterações e já tenha chegado a realizar um commit,
para desfazer é necessário usar o revert.
git revert HEAD

Renomear Commit
$ git commit --amend

Branches
empre é bom não trabalhar apenas na main para evitar problemas e ter um projeto mais flexível.

Listando Branches
$ git branch
